/*! \page page_controller_ros Controller Ros

This page assumes you have understood <a href="page_controller.html">how to implement a standard controller</a>.

<H3>Controller Ros Adaptee Implementation</H3>
In order to access the ros functionalities the controller has to inherit from roco::ControllerRos.
\code{c}
#include "roco/controllers/controllers.hpp"
namespace my_controller_ros {
class MyControllerRos: virtual public roco::ControllerRos<my_model::State, my_model::Command> {
...
};
}
\endcode

The implementation requirements are identical to standard controllers.
However, roco::ControllerRos adds ros functionalities such as the getting/setting of the ros nodehandle.

<H3>Export Controller Ros as a Plugin</H3>
In order to use the plugin mechanism of the following three steps are required.

<H4>1. Export controller ros via macro </H4>
ROCOMA_EXPORT_CONTROLLER is replaced by ROCOMA_EXPORT_CONTROLLER_ROS when implementing a ros controller.
\code{c}
#include "rocoma_plugin/rocoma_plugin.hpp"
ROCOMA_EXPORT_CONTROLLER_ROS(MyControllerRosPlugin, my_model::State, my_model::Command, my_controller_ros::MyControllerRos)
\endcode

<H4>2. Add a plugin description file </H4>
Compared to standard controllers a different base class type rocoma_plugin::ControllerRosPluginInterface is used.
\code{xml}
<library path="lib/libmy_controller_ros">
  <class type="MyControllerRosPlugin" base_class_type="rocoma_plugin::ControllerRosPluginInterface<my_model::State, my_model::Command>">
  </class>
</library>
\endcode

<H4>3. Export the plugin description file </H4>
<a href="page_controller.html">See standard controllers</a>
*/
