/*! \page page_features Features

<H3>1. Safe, two-layered emergency stop procedure</H3>
Rocoma differs between three types of controllers:
 - <B>Controllers:</B><BR>
   These are the robot controllers, some of them are very complex and are likely to throw exceptions or return false.
 - <B>Emergency Controllers:</B><BR>
   These controllers are designed to do react on emergency stops/errors. But they can not handle every error state.
 - <B>Failproof Controllers:</B><BR>
   A failproof controller must provide meaningful actuator commands in every state and thus can never fail.

\image html twolayeredemergency.png "Two-layered emergency stop procedure" width=2cm

If a controller return false or throws an exception the corresponding emergency controller is activated. Emergency controllers
provide a fast initialization function which does not introduce timing problems. Two controllers can share an emergency controller (Controller B, Controller C).
A controller can also declare no emergency controller (Controller D), then the failproof controller is used directly. When an emergency controller fails, the
failproof controller is activated.

<H3>2. Switching between different roco controllers</H3>
The procedure described in the following table guarantees a save switching between controllers.
<table>
<caption id="multi_row">Switch from ctrl1 to ctrl2</caption>
<tr><th> Pseudocode <th> Explanation
<tr><td> ctrl1.preStop() <td> <I>Stop non-core functionality (e.g ros communication).</I>
<tr><td>while(ctrl2.isBeingStopped()){}<td> <I>Wait if ctrl2 is being stopped in other thread.</I>
<tr><td> ctrl2.initializeController(dt)<td> <I>Initialize ctrl2.</I>
<tr><td> switchController(ctrl2) <td> Switch active controller to ctrl2.
<tr><td> ctrl1.stop()<td> Completely shutdown ctrl1.
</table>

<H3>3. Multi-threaded features</H3>
 <B>Parallelize controller stopping on emgergency stop:</B>
 <P>When an emergency stop occurs the active controller has to be pre-stopped and later stopped. These processes can last longer than one timestep,
 thus they are performed in parallel. Of course this implies that while this thread is running we can not switch back to that controller.</P>
 <B>Parallelize controller switching:</B>
 <P>Initialization of controllers can take a lot of time, therefore the switching procedure described above is performed in parallel. The old controller can still
 advance and provide actuator commands, while the new controller is beeing initialized. This also forces that pre-stopping and advancing at the same time must be thread-save.</P>

<H3>4. Run-time controller loading</H3>
Using the ros pluginlib, rocoma provides a plugin mechanism that allows runtime loading of controllers. Rocoma provides macros that greatly simplifies the export of controllers as plugins.

<H3>5. Emergency stop, controller switching via service call, notification via topic</H3>
The rocoma_msgs package contains all the messages and services that the ros-dependent controller manager provides.

<B>To get started refer to the \ref page_how_to.</B>

*/
