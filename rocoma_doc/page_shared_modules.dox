/*! \page page_shared_modules Shared Modules

Imagine two or more of your controllers have to share some kind of control algorithm, that should preserve some internal state.
Sharing this controller specific things in the State class is not really desirable. Therefore rocoma introduces the concept of
shared modules. Shared modules are allocated by the controller manager, and afterwards set to the interested controllers.
Shared modules have to inherit from the very slim roco::SharedModule interface.
<B>The implementer has to assure thread-safety! Only using shared modules in the advance function is recommended. </B>


Example of a shared module:
\code{c}
#include "roco/controllers/controllers.hpp"

class MySharedModule : virtual public roco::SharedModule {
 public:
  MySharedModule() = default;
  virtual ~MySharedModule() = default;

  virtual bool create(double dt) override {
    internalState_ = 0.0;
    return true;
  }

  bool foo(double& state) {
    internalState_ += 2.34;
    state = internalState_;
  }

 protected:
  double internalState_;
};
\endcode
The internal state is increased in every call of foo and returned to the caller over 'state'.

Example of a controller using the shared module:
\code{c}
bool MyController::advance(double dt) {
  if(sm_ != nullptr) {
    double state;
    sm_->foo(state);
    // do something with state
  } else {
    return false;
  }
}

bool MyController::addSharedModule(const roco::SharedModulePtr& module) {
  auto sm = std::dynamic_pointer_cast<MySharedModule>(module);
  if( sm != nullptr ) {
    sm_ = sm;
  }
  return sm != nullptr;
}
\endcode

*/
