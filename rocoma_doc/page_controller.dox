/*! \page page_controller Controller

<H3>State and Command</H3>
First of all one has to implement a State and a Command class.The State contains all information the controller needs about the robot's configuration, where as
the Command class contains commands for all the actuators that can be set by the controllers. Rocoma requires that the State class implements roco::StateInterface
and the Command class has to implement roco::CommandInterface.

Lets assume we have the following dummy implementations.
\code{c}
namespace my_model {
class Command: public roco::CommandInterface {
 public:
  bool limitCommand() {
    return true;
  }
};
}
\endcode

\code{c}
namespace my_model {
class State: public roco::StateInterface {
 public:
  bool checkState() const{
    return true;
  }
};
}
\endcode

<H3>Controller Adaptee Implementation</H3>
Every controller that shall be managed by rocoma has to inherit from roco::Controller.
\code{c}
#include "roco/controllers/controllers.hpp"
namespace my_controller {
class MyController: virtual public roco::Controller<my_model::State, my_model::Command> {
\endcode
NOTE:
 - roco::Controller is a template, we have to specify the State and the Command class.
 - virtual inheritance is used, this is necessary because the plugin mechanism introduces a diamond of death

When inheriting from roco::Controller we additionally indirectly inherit from roco::ControllerAdapteeInterface and roco::ControllerExtensionInterface as well.
The pure virtual interface of roco::ControllerAdapteeInterface has to be implemented by our controller and contains the core functionalities
of a controller (initializing, advancing, stopping, etc.). The roco::ControllerExtensionInterface provides addtional functionality that rocoma implements for you.
Such as adding workers, getting/setting controller time, and many more. These functionalities can be used in order to implement the adaptee interface.

Thus following functions have to be implemented.
\code{c}
  // Adaptee Implementation
 protected:
  virtual bool create(double dt);
  virtual bool initialize(double dt);
  virtual bool advance(double dt);
  virtual bool reset(double dt);
  virtual bool cleanup();
  virtual bool stop();
  virtual bool preStop();
}; // end class
}  // end namespace
\endcode

<H3>Export Controller as a Plugin</H3>
In order to use the plugin mechanism of rocoma the following three steps are required.

<H4>1. Export controller via macro </H4>
Add the following to the source file of the controller. This macro is a wrapper of PLUGINLIB_EXPORT_CLASS(...) for templated classes.
\code{c}
#include "rocoma_plugin/rocoma_plugin.hpp"
ROCOMA_EXPORT_CONTROLLER(MyControllerPlugin, my_model::State, my_model::Command, my_controller::MyController)
\endcode
NOTE:
 - The first entry is the name of the controller plugin. (This name is used in the ros plugin context to refer to this controller)
 - The second entry is the State class
 - The third entry is the Command class
 - The fourth entry is the controller that we want to export

<H4>2. Add a plugin description file </H4>
The ros plugin lib requires that the controller package contains a plugin description file. Assume the controller package is named my_controller,
then we add the following file, let's name it my_controller_plugin.xml.
\code{xml}
<library path="lib/libmy_controller">
  <class type="MyControllerPlugin" base_class_type="rocoma_plugin::ControllerPluginInterface<my_model::State, my_model::Command>">
  </class>
</library>
\endcode
NOTE:
 - Replace libmy_controller with the correct library name
 - Replace class type with the same name that we used in the first entry of the macro
 - The base class type is always rocoma_plugin::ControllerPluginInterface<my_model::State, my_model::Command>
  - Replace my_model::State, my_model::Command with the correct state and command class name
  - Additional white spaces or characters will cause errors in the plugin generation

<H4>3. Export the plugin description file </H4>
We have to export this configuration file in the package.xml of our package.
\code{xml}
<export>
  <rocoma_plugin plugin="${prefix}/my_controller_plugin.xml" />
</export>
\endcode

*/
